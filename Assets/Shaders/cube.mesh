#version 460
#extension GL_NV_mesh_shader : require

layout(local_size_x = 8) in;
layout(triangles, max_vertices = 8, max_primitives = 12) out;
 
layout (std140, binding = 0) uniform uniforms_t
{ 
  mat4 ViewProjectionMatrix;
  mat4 ModelMatrix;
} transform_ub;

// Custom vertex output block
layout (location = 0) out PerVertexData
{
  vec4 color;
  vec2 uv;
} vertex_out[];  // [max_vertices]
 
 
void main()
{
    const vec4 vertices[8] = {
        vec4(-0.5, -0.5,  0.5, 1.0),
        vec4( 0.5, -0.5,  0.5, 1.0),
        vec4( 0.5,  0.5,  0.5, 1.0),
        vec4(-0.5,  0.5,  0.5, 1.0),
        vec4(-0.5, -0.5, -0.5, 1.0),
        vec4( 0.5, -0.5, -0.5, 1.0),
        vec4( 0.5,  0.5, -0.5, 1.0),
        vec4(-0.5,  0.5, -0.5, 1.0)
    };

    const vec2 texcoord0[8] = {
        vec2(0.0, 0.0),
        vec2(1.0, 0.0),
        vec2(1.0, 1.0),
        vec2(0.0, 1.0),
        vec2(1.0, 0.0),
        vec2(0.0, 0.0),
        vec2(0.0, 1.0),
        vec2(1.0, 1.0)
    };

    uint thread_id = gl_LocalInvocationID.x;
    uint workgroup_id = gl_WorkGroupID.x;
    
    float xaxis = workgroup_id / 8;
    float yaxis = mod(float(workgroup_id), 8.0);

    mat4 translate;
    translate[0] = vec4(1.0, 0.0, 0.0, 0.0);
    translate[1] = vec4(0.0, 1.0, 0.0, 0.0);
    translate[2] = vec4(0.0, 0.0, 1.0, 0.0);
    translate[3] = vec4(xaxis, yaxis, 0.0, 1.0);

    // Vertices
    gl_MeshVerticesNV[thread_id].gl_Position = transform_ub.ViewProjectionMatrix * translate * transform_ub.ModelMatrix * vertices[thread_id];

    

    // UV
    vertex_out[thread_id].uv = texcoord0[thread_id];

    // Front
    gl_PrimitiveIndicesNV[0] = 0;
    gl_PrimitiveIndicesNV[1] = 1;
    gl_PrimitiveIndicesNV[2] = 2;
    gl_PrimitiveIndicesNV[3] = 0;
    gl_PrimitiveIndicesNV[4] = 2;
    gl_PrimitiveIndicesNV[5] = 3;
//    gl_PrimitiveCountNV += 2;

    // Right
    gl_PrimitiveIndicesNV[6] = 2;
    gl_PrimitiveIndicesNV[7] = 1;
    gl_PrimitiveIndicesNV[8] = 5;
    gl_PrimitiveIndicesNV[9] = 2;
    gl_PrimitiveIndicesNV[10] = 5;
    gl_PrimitiveIndicesNV[11] = 6;
//    gl_PrimitiveCountNV += 2;

    // Top
    gl_PrimitiveIndicesNV[12] = 7;
    gl_PrimitiveIndicesNV[13] = 3;
    gl_PrimitiveIndicesNV[14] = 2;
    gl_PrimitiveIndicesNV[15] = 7;
    gl_PrimitiveIndicesNV[16] = 2;
    gl_PrimitiveIndicesNV[17] = 6;
//    gl_PrimitiveCountNV += 2;

    // Back
    gl_PrimitiveIndicesNV[18] = 6;
    gl_PrimitiveIndicesNV[19] = 5;
    gl_PrimitiveIndicesNV[20] = 7;
    gl_PrimitiveIndicesNV[21] = 5;
    gl_PrimitiveIndicesNV[22] = 4;
    gl_PrimitiveIndicesNV[23] = 7;
//    gl_PrimitiveCountNV += 2;

    // Left
    gl_PrimitiveIndicesNV[24] = 7;
    gl_PrimitiveIndicesNV[25] = 0;
    gl_PrimitiveIndicesNV[26] = 4;
    gl_PrimitiveIndicesNV[27] = 7;
    gl_PrimitiveIndicesNV[28] = 3;
    gl_PrimitiveIndicesNV[29] = 0;
//    gl_PrimitiveCountNV += 2;

    // Bottom
    gl_PrimitiveIndicesNV[30] = 0;
    gl_PrimitiveIndicesNV[31] = 5;
    gl_PrimitiveIndicesNV[32] = 1;
    gl_PrimitiveIndicesNV[33] = 4;
    gl_PrimitiveIndicesNV[34] = 5;
    gl_PrimitiveIndicesNV[35] = 0;
//    gl_PrimitiveCountNV += 2;

    gl_PrimitiveCountNV = 12;
 }